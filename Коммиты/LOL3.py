from tkinter import *
from tkinter import PhotoImage, Canvas
import random

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
BG_MAIN_PATH = "D:/2 –∫—É—Ä—Å/–ü—Ä–∞–∫—Ç–∏–∫–∞ 2 –∫—É—Ä—Å 2 —Å–µ–º–µ—Å—Ç—Ä/MainMenu.png"
BG_START_PATH = "D:/2 –∫—É—Ä—Å/–ü—Ä–∞–∫—Ç–∏–∫–∞ 2 –∫—É—Ä—Å 2 —Å–µ–º–µ—Å—Ç—Ä/Prik.png"
FONT = ("Comic Sans MS", 30)
FONT_HOVER = ("Comic Sans MS", 31, "bold")
BUTTON_BG = "#4fc8f3"
BUTTON_FG = "white"

# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
window = Tk()
window.resizable(False, False)
window.title("–ò–≥—Ä–∞ –ñ–∏–∑–Ω—å")
window.state('zoomed')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞
def center_window(win, width, height):
    screen_width = win.winfo_screenwidth()
    screen_height = win.winfo_screenheight()
    x = (screen_width // 2) - (width // 2)
    y = (screen_height // 2) - (height // 2)
    win.geometry(f'{width}x{height}+{x}+{y}')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
def on_enter(event):
    event.widget.config(font=FONT_HOVER)

def on_leave(event):
    event.widget.config(font=FONT)

def create_button(parent, text, command=None):
    button = Label(parent, text=text, fg=BUTTON_FG, font=FONT, cursor="hand2", relief="flat", bg=BUTTON_BG)
    button.bind("<Enter>", on_enter)
    button.bind("<Leave>", on_leave)
    if command:
        button.bind("<Button-1>", lambda event: command())
    return button

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–µ–Ω—é –∏ –∏–≥—Ä–æ–π
def show_menu():
    game_frame.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    menu_frame.pack(fill="both", expand=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    game.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É

def start_game():
    menu_frame.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
    game_frame.pack(fill="both", expand=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    game.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É

def exit_game():
    window.destroy()

# –û–∫–Ω–æ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
def pattern():
    pattern_window = Toplevel(window)
    pattern_window.resizable(False, False)
    pattern_window.title("–®–∞–±–ª–æ–Ω—ã")
    center_window(pattern_window, 1000, 500)
    pattern_window.bg3 = PhotoImage(file="D:/2 –∫—É—Ä—Å/–ü—Ä–∞–∫—Ç–∏–∫–∞ 2 –∫—É—Ä—Å 2 —Å–µ–º–µ—Å—Ç—Ä/MainMenu.png")
    canvas1 = Canvas(pattern_window, width=1000, height=500)
    canvas1.pack(fill="both", expand=True)
    canvas1.create_image(0, 0, image=pattern_window.bg3, anchor="nw")
    close_button = create_button(pattern_window, "  –í—ã—Ö–æ–¥", pattern_window.destroy)
    canvas1.create_window(820, 430, anchor="nw", window=close_button)

# –û–∫–Ω–æ —Å –æ–±—É—á–µ–Ω–∏–µ–º
def open_tutorial():
    tutorial_window = Toplevel(window)
    tutorial_window.resizable(False, False)
    tutorial_window.title("–û–±—É—á–µ–Ω–∏–µ")
    center_window(tutorial_window, 1000, 500)
    tutorial_window.bg2 = PhotoImage(file="D:/2 –∫—É—Ä—Å/–ü—Ä–∞–∫—Ç–∏–∫–∞ 2 –∫—É—Ä—Å 2 —Å–µ–º–µ—Å—Ç—Ä/MainMenu.png")
    canvas1 = Canvas(tutorial_window, width=1000, height=500)
    canvas1.pack(fill="both", expand=True)
    canvas1.create_image(0, 0, image=tutorial_window.bg2, anchor="nw")
    button_exit_tut = create_button(tutorial_window, "–ó–∞–∫—Ä—ã—Ç—å", tutorial_window.destroy)
    canvas1.create_window(820, 430, anchor="nw", window=button_exit_tut)
    tutorial_text = """
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–µ –ø–æ –∏–≥—Ä–µ –ñ–∏–∑–Ω—å!

    –¶–µ–ª—å –∏–≥—Ä—ã:
    –≠—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫ –Ω–∞ –¥–≤—É–º–µ—Ä–Ω–æ–π —Ä–µ—à–µ—Ç–∫–µ. 
    –ò–≥—Ä–∞ –±—ã–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–º –î–∂–æ–Ω–æ–º –ö–æ–Ω–≤–µ–µ–º –≤ 1970 –≥–æ–¥—É –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–π 
    –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º —Å–º—ã—Å–ª–µ, –∞ —Å–∫–æ—Ä–µ–µ —Å–∏–º—É–ª—è—Ü–∏–µ–π. 

    –ü—Ä–∞–≤–∏–ª–∞:
    1. –ö–ª–µ—Ç–∫–∏: –ö–∞–∂–¥–∞—è –∫–ª–µ—Ç–∫–∞ –Ω–∞ —Ä–µ—à–µ—Ç–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å "–∂–∏–≤–æ–π" –∏–ª–∏ "–º–µ—Ä—Ç–≤–æ–π".
    2. –°–æ—Å–µ–¥—Å—Ç–≤–æ: –ö–∞–∂–¥–∞—è –∫–ª–µ—Ç–∫–∞ –∏–º–µ–µ—Ç –≤–æ—Å–µ–º—å —Å–æ—Å–µ–¥–µ–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –∏ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏).
    3. –ü—Ä–∞–≤–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏:
   ‚Ä¢ –ï—Å–ª–∏ –∂–∏–≤–∞—è –∫–ª–µ—Ç–∫–∞ –∏–º–µ–µ—Ç 2 –∏–ª–∏ 3 –∂–∏–≤—ã—Ö —Å–æ—Å–µ–¥–∞, –æ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∂–∏–≤–æ–π; –∏–Ω–∞—á–µ –æ–Ω–∞ —É–º–∏—Ä–∞–µ—Ç (–æ—Ç –ø–µ—Ä–µ–Ω–∞—Å–µ–ª–µ–Ω–∏—è –∏–ª–∏ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞).
   ‚Ä¢ –ï—Å–ª–∏ –º–µ—Ä—Ç–≤–∞—è –∫–ª–µ—Ç–∫–∞ –∏–º–µ–µ—Ç —Ä–æ–≤–Ω–æ 3 –∂–∏–≤—ã—Ö —Å–æ—Å–µ–¥–∞, –æ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∂–∏–≤–æ–π (–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è).

    –ù–∞–∂–º–∏—Ç–µ '–ó–∞–∫—Ä—ã—Ç—å', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É.
    """
    label = Label(tutorial_window, text=tutorial_text, justify="left", padx=10, pady=10, font=('Comic Sans MS', 11), fg="white", bg="#4fc8f3")
    canvas1.create_window(500, 200, anchor="center", window=label)

# –ö–ª–∞—Å—Å –∏–≥—Ä—ã "–ñ–∏–∑–Ω—å"
class GameOfLife:
    def __init__(self, root, width=50, height=50, cell_size=10):
        self.root = root
        self.width = width
        self.height = height
        self.cell_size = cell_size
        self.grid = [[0 for _ in range(width)] for _ in range(height)]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–π —Å–µ—Ç–∫–∏
        self.canvas = Canvas(root, width=width*cell_size, height=height*cell_size)
        self.canvas.pack()
        self.running = False
        self.draw_grid()
        self.create_buttons()
        self.canvas.bind("<Button-1>", self.toggle_cell)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –º—ã—à–∏

    def draw_grid(self):
        self.canvas.delete("all")
        for y in range(self.height):
            for x in range(self.width):
                if self.grid[y][x]:
                    self.canvas.create_rectangle(
                        x * self.cell_size, y * self.cell_size,
                        (x + 1) * self.cell_size, (y + 1) * self.cell_size,
                        fill="green"
                    )
                else:
                    self.canvas.create_rectangle(
                        x * self.cell_size, y * self.cell_size,
                        (x + 1) * self.cell_size, (y + 1) * self.cell_size,
                        fill="white", outline="gray"
                    )

    def create_buttons(self):
        self.start_button = Button(self.root, text="Start", command=self.start)
        self.start_button.pack(side=LEFT)
        self.stop_button = Button(self.root, text="Stop", command=self.stop)
        self.stop_button.pack(side=LEFT)
        self.reset_button = Button(self.root, text="Reset", command=self.reset)
        self.reset_button.pack(side=LEFT)
        self.randomize_button = Button(self.root, text="Randomize", command=self.randomize)
        self.randomize_button.pack(side=LEFT)

    def start(self):
        self.running = True
        self.run_generation()

    def stop(self):
        self.running = False

    def reset(self):
        self.grid = [[0 for _ in range(self.width)] for _ in range(self.height)]  # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ç–∫–∏
        self.draw_grid()

    def randomize(self):
        self.grid = [[random.choice([0, 1]) for _ in range(self.width)] for _ in range(self.height)]
        self.draw_grid()

    def run_generation(self):
        if not self.running:
            return
        new_grid = [[0 for _ in range(self.width)] for _ in range(self.height)]
        for y in range(self.height):
            for x in range(self.width):
                neighbors = self.count_neighbors(x, y)
                if self.grid[y][x]:
                    if neighbors < 2 or neighbors > 3:
                        new_grid[y][x] = 0
                    else:
                        new_grid[y][x] = 1
                else:
                    if neighbors == 3:
                        new_grid[y][x] = 1
        self.grid = new_grid
        self.draw_grid()
        self.root.after(100, self.run_generation)

    def count_neighbors(self, x, y):
        neighbors = 0
        for dy in [-1, 0, 1]:
            for dx in [-1, 0, 1]:
                if dx == 0 and dy == 0:
                    continue
                nx, ny = x + dx, y + dy
                if 0 <= nx < self.width and 0 <= ny < self.height:
                    neighbors += self.grid[ny][nx]
        return neighbors

    def toggle_cell(self, event):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ –∫–∞–∫–æ–π –∫–ª–µ—Ç–∫–µ –∫–ª–∏–∫–Ω—É–ª–∏
        x = event.x // self.cell_size
        y = event.y // self.cell_size
        if 0 <= x < self.width and 0 <= y < self.height:
            self.grid[y][x] = 1 - self.grid[y][x]  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
            self.draw_grid()

# –ú–µ–Ω—é
menu_frame = Frame(window)
menu_frame.pack(fill="both", expand=True)

bg_main = PhotoImage(file=BG_MAIN_PATH)
canvas = Canvas(menu_frame, width=window.winfo_screenwidth(), height=window.winfo_screenheight())
canvas.pack(fill="both", expand=True)
canvas.create_image(0, 0, image=bg_main, anchor="nw")
canvas.create_text(770, 150, text="–ñ–∏–∑–Ω—å", font=("Comic Sans MS", 60, "bold"), fill="white")

button_start = create_button(menu_frame, "  –ù–∞—á–∞—Ç—å", start_game)
button_exit = create_button(menu_frame, "  –í—ã—Ö–æ–¥",
exit_game)
button_pattern = create_button(menu_frame, "–®–∞–±–ª–æ–Ω—ã", pattern)
button_music = create_button(menu_frame, "‚ô´")
button_info = create_button(menu_frame, "üõà", open_tutorial)

canvas.create_window(670, 230, anchor="nw", window=button_start)
canvas.create_window(678, 370, anchor="nw", window=button_exit)
canvas.create_window(670, 300, anchor="nw", window=button_pattern)
canvas.create_window(12, 2, anchor="nw", window=button_music)
canvas.create_window(1485, 2, anchor="nw", window=button_info)

# –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
game_frame = Frame(window)

bg_start = PhotoImage(file=BG_START_PATH)
game_canvas = Canvas(game_frame, width=window.winfo_screenwidth(), height=window.winfo_screenheight())
game_canvas.pack(fill="both", expand=True)
game_canvas.create_image(0, 0, image=bg_start, anchor="nw")

button_menu = create_button(game_frame, "–ú–µ–Ω—é", show_menu)
game_canvas.create_window(12, 2, anchor="nw", window=button_menu)

# –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
game = GameOfLife(game_canvas)

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
window.mainloop()